package cs492finalproject;

import cs492finalproject.Interfaces.LogInterface;
import cs492finalproject.IDS.PacketCapture;
import cs492finalproject.Utils.BoundsPopupMenuListener;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;

import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;

/**
 *
 * @author Jason
 */
public class MainFrame extends javax.swing.JFrame implements LogInterface {

  private List<PcapIf> alldevs = new ArrayList<PcapIf>(); // Will be filled with NICs  
  private StringBuilder errbuf = new StringBuilder(); // For any error msgs
  private PacketCapture tPCAP;
  private Pcap pcap;
  private int userVal;
  private int numPackets;
  Thread pcapThread;

  public MainFrame() {
    initComponents();
  }

  @Override
  public void appendLog(JTextArea log, String message) {
    log.append(message);
    log.setCaretPosition(log.getText().length());
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    tbStatusBar = new javax.swing.JToolBar();
    lblStatus = new javax.swing.JLabel();
    filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
    pbarProgress = new javax.swing.JProgressBar();
    filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(10, 32767));
    tabpaneMain = new javax.swing.JTabbedPane();
    panelCapturing = new javax.swing.JPanel();
    lblDevice = new javax.swing.JLabel();
    cboxDevice = new javax.swing.JComboBox();
    btnScan = new javax.swing.JButton();
    lblPacketNumber = new javax.swing.JLabel();
    spinPacketNumber = new javax.swing.JSpinner();
    tbtnCapture = new javax.swing.JToggleButton();
    panelFiltering = new javax.swing.JPanel();
    panelPHA = new javax.swing.JPanel();
    panelAnomaly = new javax.swing.JPanel();
    spLog = new javax.swing.JScrollPane();
    txtaLog = new javax.swing.JTextArea();
    mbarMain = new javax.swing.JMenuBar();
    menuFile = new javax.swing.JMenu();
    menuItemExit = new javax.swing.JMenuItem();
    menuEdit = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("CS 492 - Host-Based IDS System");
    setName("frameMaine"); // NOI18N
    setResizable(false);

    tbStatusBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    tbStatusBar.setFloatable(false);
    tbStatusBar.setRollover(true);

    lblStatus.setForeground(new java.awt.Color(0, 150, 0));
    lblStatus.setText("Ready");
    tbStatusBar.add(lblStatus);
    tbStatusBar.add(filler2);

    pbarProgress.setBorderPainted(false);
    pbarProgress.setDoubleBuffered(true);
    pbarProgress.setMinimumSize(new java.awt.Dimension(146, 14));
    tbStatusBar.add(pbarProgress);
    pbarProgress.setVisible(false);
    tbStatusBar.add(filler1);

    tabpaneMain.setTabPlacement(javax.swing.JTabbedPane.LEFT);
    tabpaneMain.setDoubleBuffered(true);

    lblDevice.setText("Hardware Device:");

    BoundsPopupMenuListener listener = new BoundsPopupMenuListener(true, false);

    cboxDevice.addPopupMenuListener (listener );
    cboxDevice.setPrototypeDisplayValue ("ItemWWW");

    btnScan.setText("Scan for Devices");
    btnScan.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnScanActionPerformed(evt);
      }
    });

    lblPacketNumber.setText("# of Packets (0 for infinity):");

    spinPacketNumber.setEditor(new javax.swing.JSpinner.NumberEditor(spinPacketNumber, ""));
    spinPacketNumber.setModel(new SpinnerNumberModel(0, 0, 1000, 1));

    tbtnCapture.setText("Packet Capture OFF");
    tbtnCapture.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        tbtnCaptureStateChanged(evt);
      }
    });
    tbtnCapture.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        tbtnCaptureActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panelCapturingLayout = new javax.swing.GroupLayout(panelCapturing);
    panelCapturing.setLayout(panelCapturingLayout);
    panelCapturingLayout.setHorizontalGroup(
      panelCapturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelCapturingLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelCapturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(panelCapturingLayout.createSequentialGroup()
            .addComponent(lblDevice)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cboxDevice, 0, 390, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnScan))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCapturingLayout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelCapturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCapturingLayout.createSequentialGroup()
                .addComponent(lblPacketNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinPacketNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(tbtnCapture, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addContainerGap())
    );
    panelCapturingLayout.setVerticalGroup(
      panelCapturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelCapturingLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(panelCapturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cboxDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lblDevice)
          .addComponent(btnScan))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
        .addGroup(panelCapturingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(spinPacketNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lblPacketNumber))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(tbtnCapture, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    tabpaneMain.addTab("Packet Capturing", panelCapturing);

    javax.swing.GroupLayout panelFilteringLayout = new javax.swing.GroupLayout(panelFiltering);
    panelFiltering.setLayout(panelFilteringLayout);
    panelFilteringLayout.setHorizontalGroup(
      panelFilteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 619, Short.MAX_VALUE)
    );
    panelFilteringLayout.setVerticalGroup(
      panelFilteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 143, Short.MAX_VALUE)
    );

    tabpaneMain.addTab("Packet Filtering", panelFiltering);
    tabpaneMain.setEnabledAt(tabpaneMain.indexOfTab("Packet Filtering"), false);

    javax.swing.GroupLayout panelPHALayout = new javax.swing.GroupLayout(panelPHA);
    panelPHA.setLayout(panelPHALayout);
    panelPHALayout.setHorizontalGroup(
      panelPHALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 619, Short.MAX_VALUE)
    );
    panelPHALayout.setVerticalGroup(
      panelPHALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 143, Short.MAX_VALUE)
    );

    tabpaneMain.addTab("PHA", panelPHA);
    tabpaneMain.setEnabledAt(tabpaneMain.indexOfTab("PHA"), false);

    javax.swing.GroupLayout panelAnomalyLayout = new javax.swing.GroupLayout(panelAnomaly);
    panelAnomaly.setLayout(panelAnomalyLayout);
    panelAnomalyLayout.setHorizontalGroup(
      panelAnomalyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 619, Short.MAX_VALUE)
    );
    panelAnomalyLayout.setVerticalGroup(
      panelAnomalyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 143, Short.MAX_VALUE)
    );

    tabpaneMain.addTab("Anomaly Detection", panelAnomaly);
    tabpaneMain.setEnabledAt(tabpaneMain.indexOfTab("Anomaly Detection"), false);

    spLog.setAutoscrolls(true);

    txtaLog.setEditable(false);
    txtaLog.setBackground(new java.awt.Color(204, 204, 255));
    txtaLog.setColumns(20);
    txtaLog.setForeground(new java.awt.Color(51, 51, 51));
    txtaLog.setLineWrap(true);
    txtaLog.setRows(5);
    txtaLog.setWrapStyleWord(true);
    txtaLog.setCaret(txtaLog.getCaret());
    txtaLog.setDoubleBuffered(true);
    txtaLog.setSelectionColor(new java.awt.Color(0, 153, 102));
    spLog.setViewportView(txtaLog);

    menuFile.setText("File");

    menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
    menuItemExit.setText("Exit");
    menuItemExit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menuItemExitActionPerformed(evt);
      }
    });
    menuFile.add(menuItemExit);

    mbarMain.add(menuFile);

    menuEdit.setText("Edit");
    mbarMain.add(menuEdit);

    setJMenuBar(mbarMain);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(tbStatusBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
          .addComponent(spLog)
          .addComponent(tabpaneMain))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(tabpaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(spLog, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(tbStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>//GEN-END:initComponents

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
      System.exit(0);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void btnScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScanActionPerformed
      alldevs.clear(); //Clear the ArrayList first
      int r = Pcap.findAllDevs(alldevs, errbuf);
      if (r == Pcap.NOT_OK || alldevs.isEmpty()) {
        appendLog(txtaLog, "Can't read list of devices, error is " + errbuf.toString() + "\n");
        return;
      }

      appendLog(txtaLog, "Network devices found:\n");
      cboxDevice.removeAllItems(); //Clear the ComboBox first
      int i = 1;
      for (PcapIf device : alldevs) {
        try {
          String description
              = (device.getDescription() != null) ? device.getDescription() : "No description available";
          appendLog(txtaLog, "    " + i++ + "." + device.getName() + " [" + description + "]" + 
              " [" + asString(device.getHardwareAddress()) + "] " + "\n");
          cboxDevice.addItem(description + " - [" + asString(device.getHardwareAddress()) + "]");
        } catch (IOException e) {
          // Fail silently, device doesn't have a hardware address
        }
      }

      PcapIf device = alldevs.get(0); // We know we have at least 1 device  
      appendLog(txtaLog, "\nChoosing "
          + ((device.getDescription() != null) ? device.getDescription()
          : device.getName()) + " on your behalf.\n");
    }//GEN-LAST:event_btnScanActionPerformed

    private void tbtnCaptureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtnCaptureActionPerformed
      userVal = Integer.parseInt(spinPacketNumber.getValue().toString());
      numPackets = (userVal == 0) ? Pcap.LOOP_INFINITE : userVal;
      tPCAP = new PacketCapture(userVal, numPackets, tbtnCapture, txtaLog, pcap, cboxDevice, alldevs, errbuf);
      pcapThread = new Thread(tPCAP);
      pcapThread.start();
    }//GEN-LAST:event_tbtnCaptureActionPerformed

    private void tbtnCaptureStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tbtnCaptureStateChanged
      tbtnCapture.setText((tbtnCapture.isSelected() ? "Packet Capture ON" : "Packet Capture OFF"));
      lblStatus.setText((tbtnCapture.isSelected() ? "Capturing Packets..." : "Ready"));
      lblStatus.setForeground((tbtnCapture.isSelected() ? new Color(150, 100, 0) : new Color(0, 150, 0)));
      pbarProgress.setVisible(tbtnCapture.isSelected());
      pbarProgress.setIndeterminate(tbtnCapture.isSelected());
      if (tPCAP != null) {
        tPCAP.setCapturing(tbtnCapture.isSelected());
      }
      if (!tbtnCapture.isSelected() && pcapThread != null) pcapThread.interrupt();
    }//GEN-LAST:event_tbtnCaptureStateChanged

  private static String asString(final byte[] mac) {
    final StringBuilder buf = new StringBuilder();
    for (byte b : mac) {
      if (buf.length() != 0) {
        buf.append(':');
      }
      if (b >= 0 && b < 16) {
        buf.append('0');
      }
      buf.append(Integer.toHexString((b < 0) ? b + 256 : b).toUpperCase());
    }

    return buf.toString();
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;

        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new MainFrame().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnScan;
  private javax.swing.JComboBox cboxDevice;
  private javax.swing.Box.Filler filler1;
  private javax.swing.Box.Filler filler2;
  private javax.swing.JLabel lblDevice;
  private javax.swing.JLabel lblPacketNumber;
  private javax.swing.JLabel lblStatus;
  private javax.swing.JMenuBar mbarMain;
  private javax.swing.JMenu menuEdit;
  private javax.swing.JMenu menuFile;
  private javax.swing.JMenuItem menuItemExit;
  private javax.swing.JPanel panelAnomaly;
  private javax.swing.JPanel panelCapturing;
  private javax.swing.JPanel panelFiltering;
  private javax.swing.JPanel panelPHA;
  private javax.swing.JProgressBar pbarProgress;
  private javax.swing.JScrollPane spLog;
  private javax.swing.JSpinner spinPacketNumber;
  private javax.swing.JTabbedPane tabpaneMain;
  private javax.swing.JToolBar tbStatusBar;
  private javax.swing.JToggleButton tbtnCapture;
  private javax.swing.JTextArea txtaLog;
  // End of variables declaration//GEN-END:variables
}
